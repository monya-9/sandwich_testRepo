    name: Deploy Project (Full CD)

    on:
      workflow_run:
        workflows: ["Create CodePipeline"]
        types:
          - completed

    env:
      AWS_REGION: ap-northeast-2
      S3_BUCKET: sandwich-user-projects
      USER_ID: ${{ secrets.USER_ID }}
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
      ECS_CLUSTER: sandwich-cluster
      ECS_SERVICE: sandwich-service
      ECS_CONTAINER_NAME: app-container

    jobs:
      build-and-deploy:
        runs-on: ubuntu-latest
        steps:
          - name: Checkout code
            uses: actions/checkout@v3

          - name: Install Node.js
            uses: actions/setup-node@v3
            with:
              node-version: '18'

          - name: Install dependencies
            run: npm install

          - name: Build project
            run: npm run build

          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v3
            with:
              aws-access-key-id: ${{ secrets.SANDWICH_USER_AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.SANDWICH_USER_AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ env.AWS_REGION }}

          - name: Login to Amazon ECR
            uses: aws-actions/amazon-ecr-login@v2

          - name: Create ECR repository if not exists
            run: |
              aws ecr describe-repositories --repository-names "sandwich-user-projects/${{ env.USER_ID }}-${{ env.PROJECT_ID }}" || \
              aws ecr create-repository --repository-name "sandwich-user-projects/${{ env.USER_ID }}-${{ env.PROJECT_ID }}"

          - name: Build and Push Docker image
            run: |
              IMAGE_TAG=${GITHUB_SHA}
              ECR_URI=398808282696.dkr.ecr.ap-northeast-2.amazonaws.com/sandwich-user-projects/${{ env.USER_ID }}-${{ env.PROJECT_ID }}

              docker build -t $ECR_URI:$IMAGE_TAG .
              docker push $ECR_URI:$IMAGE_TAG

              docker tag $ECR_URI:$IMAGE_TAG $ECR_URI:latest
              docker push $ECR_URI:latest

          - name: Update ECS service
            run: |
              aws ecs update-service \
                --cluster ${{ env.ECS_CLUSTER }} \
                --service ${{ env.ECS_SERVICE }} \
                --force-new-deployment \
                --region ${{ env.AWS_REGION }}

          - name: Deploy to S3
            run: aws s3 sync build/ s3://${{ env.S3_BUCKET }}/${{ env.USER_ID }}/${{ env.PROJECT_ID }} --acl public-read

          - name: Invalidate CloudFront cache
            run: |
              aws cloudfront create-invalidation \
                --distribution-id ${{ secrets.SANDWICH_USER_CLOUDFRONT_DISTRIBUTION_ID }} \
                --paths "/${{ env.USER_ID }}/${{ env.PROJECT_ID }}/*"


